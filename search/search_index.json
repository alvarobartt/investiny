{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udd0f\ud83c\udffb investiny is investpy but made tiny investiny is faster, lighter, and easier to use than investpy . investiny has been created due to the latest Investing.com changes in their API protection protocols, as now their main APIs are Cloudflare V2 protected. Anyway, there are still some APIs working fine, so this package has been created as a temporary replacement for investpy while we get to an agreement to continue the development of investpy . In the meantime, anyone can use investiny as I'm actively working on it, and ideally, it should support most of the functionality provided by investpy .","title":"Home"},{"location":"#investiny-is-investpy-but-made-tiny","text":"investiny is faster, lighter, and easier to use than investpy . investiny has been created due to the latest Investing.com changes in their API protection protocols, as now their main APIs are Cloudflare V2 protected. Anyway, there are still some APIs working fine, so this package has been created as a temporary replacement for investpy while we get to an agreement to continue the development of investpy . In the meantime, anyone can use investiny as I'm actively working on it, and ideally, it should support most of the functionality provided by investpy .","title":"\ud83e\udd0f\ud83c\udffb investiny is investpy but made tiny"},{"location":"differences-with-investpy/","text":"\ud83e\udd14 What are the differences with investpy ? investiny is faster, lighter and easier to use , but with reduced functionality for the moment. investiny lets you retrieve historical data from Investing.com through historical_data and search any available asset through search_assets , while investpy offers more functions to also retrieve technical indicators, economic calendars, dividends, etc. but those will come at some point to investiny too. investiny introduces intraday data, so the specified intervals when retrieving historical data for any asset available at Investing.com goes from 1 minute to monthly data. investpy uses Investing.com's APIs at https://www.investing.com/instruments/HistoricalDataAjax and at https://api.investing.com/api/financialdata/historical, that are Cloudflare protected and not working any more, as you'll end up getting blocked with 403 Forbidden HTTP code; while investiny is using https://tvc6.investing.com/, which seems to be more reliable right now according to the ran tests, as well as providing intraday data. Intraday Data Any Range Historical Data Search Assets/Quotes Dividends Economic Calendar Technical Indicators Economic News investiny \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c investpy \u274c \u2705 \u2705 \u2705 \u2705 \u2705 \u2705","title":"Differences with investpy"},{"location":"differences-with-investpy/#what-are-the-differences-with-investpy","text":"investiny is faster, lighter and easier to use , but with reduced functionality for the moment. investiny lets you retrieve historical data from Investing.com through historical_data and search any available asset through search_assets , while investpy offers more functions to also retrieve technical indicators, economic calendars, dividends, etc. but those will come at some point to investiny too. investiny introduces intraday data, so the specified intervals when retrieving historical data for any asset available at Investing.com goes from 1 minute to monthly data. investpy uses Investing.com's APIs at https://www.investing.com/instruments/HistoricalDataAjax and at https://api.investing.com/api/financialdata/historical, that are Cloudflare protected and not working any more, as you'll end up getting blocked with 403 Forbidden HTTP code; while investiny is using https://tvc6.investing.com/, which seems to be more reliable right now according to the ran tests, as well as providing intraday data. Intraday Data Any Range Historical Data Search Assets/Quotes Dividends Economic Calendar Technical Indicators Economic News investiny \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c investpy \u274c \u2705 \u2705 \u2705 \u2705 \u2705 \u2705","title":"\ud83e\udd14 What are the differences with investpy?"},{"location":"disclaimer/","text":"\u26a0\ufe0f Disclaimer Investing.com is a registered trademark of Investing.com, and its services are offered by Fusion Media Limited. Neither investpy nor investiny is affiliated, endorsed, or vetted by Investing.com. Both investpy and investiny are open-source packages that use Investing.com's available data, intended for research and educational purposes only. You should refer to Investing.com's terms and conditions at https://www.investing.com/about-us/terms-and-conditions for details on your rights to use the actual data, as it is intended for personal use only.","title":"Disclaimer"},{"location":"disclaimer/#disclaimer","text":"Investing.com is a registered trademark of Investing.com, and its services are offered by Fusion Media Limited. Neither investpy nor investiny is affiliated, endorsed, or vetted by Investing.com. Both investpy and investiny are open-source packages that use Investing.com's available data, intended for research and educational purposes only. You should refer to Investing.com's terms and conditions at https://www.investing.com/about-us/terms-and-conditions for details on your rights to use the actual data, as it is intended for personal use only.","title":"\u26a0\ufe0f Disclaimer"},{"location":"installation/","text":"\ud83d\udee0\ufe0f Installation $ pip install investiny","title":"Installation"},{"location":"installation/#installation","text":"$ pip install investiny","title":"\ud83d\udee0\ufe0f Installation"},{"location":"integrations/","text":"\ud83e\udd1d\ud83c\udffb Integrations Here we'll explain how to integrate investiny with other packages/libraries. \ud83d\udc3c Pandas You'll need to install pandas as pip install pandas , and then in case you want to mimic investpy 's output for historical data retrieval functions, you'll need to run the following code: from investiny import historical_data import pandas as pd output = historical_data ( investing_id = 6408 ) data = pd . DataFrame . from_dict ( output ) data . rename ( columns = { \"date\" : \"Date\" , \"open\" : \"Open\" , \"high\" : \"High\" , \"low\" : \"Low\" , \"close\" : \"Close\" , \"volume\" : \"Volume\" }, inplace = True ) data . set_index ( \"Date\" , inplace = True ) \u2795 More to come... Feel free to submit a PR to update the documentation by adding more integrations with any other package/library that you think can be useful to be documented.","title":"Integrations"},{"location":"integrations/#integrations","text":"Here we'll explain how to integrate investiny with other packages/libraries.","title":"\ud83e\udd1d\ud83c\udffb Integrations"},{"location":"integrations/#pandas","text":"You'll need to install pandas as pip install pandas , and then in case you want to mimic investpy 's output for historical data retrieval functions, you'll need to run the following code: from investiny import historical_data import pandas as pd output = historical_data ( investing_id = 6408 ) data = pd . DataFrame . from_dict ( output ) data . rename ( columns = { \"date\" : \"Date\" , \"open\" : \"Open\" , \"high\" : \"High\" , \"low\" : \"Low\" , \"close\" : \"Close\" , \"volume\" : \"Volume\" }, inplace = True ) data . set_index ( \"Date\" , inplace = True )","title":"\ud83d\udc3c Pandas"},{"location":"integrations/#more-to-come","text":"Feel free to submit a PR to update the documentation by adding more integrations with any other package/library that you think can be useful to be documented.","title":"\u2795 More to come..."},{"location":"license/","text":"\ud83d\udcdd License MIT License Copyright (c) 2022 Alvaro Bartolome Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2022 Alvaro Bartolome Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"\ud83d\udcdd License"},{"location":"limitations/","text":"\ud83d\udec2 Limitations After some extensive testing to explore further Investing.com's API limitations, we ran some tests to see whether Cloudflare was blocking incoming requests, and it's not, so the API used by investiny seems stable enough for the moment (\ud83e\udd1e\ud83c\udffb fingers crossed!). But besides that, there's a known limitation that we've spotted while retrieving historical data depending on the intervals used. All the limitations are now handled internally, so this is done transparently for the user, but whenever it comes to intra-day data, it seems that just a portion of it is available on Investing.com. So here's the table with the intra-day data limitations: Interval Limitation 1 min 6 months 5 min ~ 1 year 15 min ~ 1.5 years 30 min ~ 2 years 60 min (1 hour) ~ 5 years 300 min (5 hours) ~ 13 years For the rest of the possible interval values for investiny.historical_data it doesn't seem to be any known limitation yet.","title":"Limitations"},{"location":"limitations/#limitations","text":"After some extensive testing to explore further Investing.com's API limitations, we ran some tests to see whether Cloudflare was blocking incoming requests, and it's not, so the API used by investiny seems stable enough for the moment (\ud83e\udd1e\ud83c\udffb fingers crossed!). But besides that, there's a known limitation that we've spotted while retrieving historical data depending on the intervals used. All the limitations are now handled internally, so this is done transparently for the user, but whenever it comes to intra-day data, it seems that just a portion of it is available on Investing.com. So here's the table with the intra-day data limitations: Interval Limitation 1 min 6 months 5 min ~ 1 year 15 min ~ 1.5 years 30 min ~ 2 years 60 min (1 hour) ~ 5 years 300 min (5 hours) ~ 13 years For the rest of the possible interval values for investiny.historical_data it doesn't seem to be any known limitation yet.","title":"\ud83d\udec2 Limitations"},{"location":"requirements/","text":"\ud83d\udcc3 Requirements Python 3.8+","title":"Requirements"},{"location":"requirements/#requirements","text":"Python 3.8+","title":"\ud83d\udcc3 Requirements"},{"location":"usage/","text":"\ud83d\udcbb Usage Retrieve historical data from Investing.com using the Investing.com ID of the asset that you want to retrieve the data from. from investiny import historical_data data = historical_data ( investing_id = 6408 , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" ) # Returns AAPL historical data as JSON (without date) There's also a function to look for assets in Investing.com, that also lets you retrieve the Investing.com ID that you can, later on, use in historical_data as an input parameter. from investiny import search_assets results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) # Returns a list with all the results found in Investing.com As search_assets returns a list of results, you can check each of them, retrieve the ticker from the asset that you want to retrieve historical data from and pass it as a parameter to historical_data . So on, the combination of both functions should look like the following: from investiny import historical_data , search_assets search_results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) investing_id = int ( search_results [ 0 ][ \"ticker\" ]) # Assuming the first entry is the desired one (top result in Investing.com) data = historical_data ( investing_id = investing_id , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" )","title":"Usage"},{"location":"usage/#usage","text":"Retrieve historical data from Investing.com using the Investing.com ID of the asset that you want to retrieve the data from. from investiny import historical_data data = historical_data ( investing_id = 6408 , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" ) # Returns AAPL historical data as JSON (without date) There's also a function to look for assets in Investing.com, that also lets you retrieve the Investing.com ID that you can, later on, use in historical_data as an input parameter. from investiny import search_assets results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) # Returns a list with all the results found in Investing.com As search_assets returns a list of results, you can check each of them, retrieve the ticker from the asset that you want to retrieve historical data from and pass it as a parameter to historical_data . So on, the combination of both functions should look like the following: from investiny import historical_data , search_assets search_results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) investing_id = int ( search_results [ 0 ][ \"ticker\" ]) # Assuming the first entry is the desired one (top result in Investing.com) data = historical_data ( investing_id = investing_id , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" )","title":"\ud83d\udcbb Usage"},{"location":"api/historical/","text":"Get historical data from Investing.com. Parameters: Name Type Description Default investing_id int Investing.com's ID for the asset. required from_date Union [ str , None] Initial date to retrieve historical data (formatted as m/d/Y). Defaults to None. None to_date Union [ str , None] Final date to retrieve historical data (formatted as m/d/Y). Defaults to None, unless from_date is specified, that defaults to current date. None interval Literal [1, 5, 15, 30, 60, 300, 'D', 'W', 'M'] Interval between each historical data point. Defaults to \"D\". 'D' Note If no dates are introduced, the function will retrieve the last 30 days of historical data. Returns: Type Description Dict [ str , Any ] A dictionary with the historical data from Investing.com. Source code in investiny/historical.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def historical_data ( investing_id : int , from_date : Union [ str , None ] = None , to_date : Union [ str , None ] = None , interval : Literal [ 1 , 5 , 15 , 30 , 60 , 300 , \"D\" , \"W\" , \"M\" ] = \"D\" , ) -> Dict [ str , Any ]: \"\"\"Get historical data from Investing.com. Args: investing_id: Investing.com's ID for the asset. from_date: Initial date to retrieve historical data (formatted as m/d/Y). Defaults to None. to_date: Final date to retrieve historical data (formatted as m/d/Y). Defaults to None, unless `from_date` is specified, that defaults to current date. interval: Interval between each historical data point. Defaults to \"D\". Note: If no dates are introduced, the function will retrieve the last 30 days of historical data. Returns: A dictionary with the historical data from Investing.com. \"\"\" from_datetimes , to_datetimes = calculate_date_intervals ( from_date = from_date , to_date = to_date , interval = interval ) result : Dict [ str , Any ] = { \"date\" : [], \"open\" : [], \"high\" : [], \"low\" : [], \"close\" : [], \"volume\" : [], } datetime_format = ( Config . time_format if interval not in [ \"D\" , \"W\" , \"M\" ] else Config . date_format ) info = investing_info ( investing_id = investing_id ) has_volume = not info [ \"has_no_volume\" ] days_shift = 1 if info [ \"type\" ] in [ \"Yield\" ] else 0 for to_datetime , from_datetime in zip ( to_datetimes , from_datetimes ): params = { \"symbol\" : investing_id , \"from\" : int ( from_datetime . timestamp ()), \"to\" : int ( to_datetime . timestamp ()), \"resolution\" : interval , } data = request_to_investing ( endpoint = \"history\" , params = params ) result [ \"date\" ] += [ ( datetime . fromtimestamp ( t ) - timedelta ( days = days_shift )) . strftime ( datetime_format ) for t in data [ \"t\" ] # type: ignore ] result [ \"open\" ] += data [ \"o\" ] # type: ignore result [ \"high\" ] += data [ \"h\" ] # type: ignore result [ \"low\" ] += data [ \"l\" ] # type: ignore result [ \"close\" ] += data [ \"c\" ] # type: ignore if has_volume : result [ \"volume\" ] += data [ \"v\" ] # type: ignore if len ( result [ \"volume\" ]) < 1 : result . pop ( \"volume\" ) return result","title":"Historical"},{"location":"api/info/","text":"Get assets' public information available at Investing.com Parameters: Name Type Description Default asset Union [ str , List [ str ]] name to retrieve its information from Investing.com. Note that this arg can be: the name of a single asset, a comma-separated string with asset names, or a list of asset names. required Returns: Type Description Dict [ str , Any ] A dictionary with the assets' public information available at Investing.com, where the Dict [ str , Any ] key is the asset name and the value is a dictionary with the asset's information. Source code in investiny/info.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def info ( asset : Union [ str , List [ str ]]) -> Dict [ str , Any ]: \"\"\"Get assets' public information available at Investing.com Args: asset: name to retrieve its information from Investing.com. Note that this arg can be: the name of a single asset, a comma-separated string with asset names, or a list of asset names. Returns: A dictionary with the assets' public information available at Investing.com, where the key is the asset name and the value is a dictionary with the asset's information. \"\"\" results = request_to_investing ( endpoint = \"quotes\" , params = { \"symbols\" : asset if isinstance ( asset , str ) else \",\" . join ( asset )}, ) actual_results = results [ \"d\" ] # type: ignore if len ( actual_results ) < 2 : return { actual_results [ 0 ][ \"n\" ]: actual_results [ 0 ][ \"v\" ]} r = {} for result in actual_results : r [ result [ \"n\" ]] = result [ \"v\" ] return r","title":"Info"},{"location":"api/search/","text":"Search any available asset at Investing.com. Parameters: Name Type Description Default query str Query to search for. required limit int Maximum number of results to retrieve. Defaults to 10. 10 type Union [ Literal ['Stock', 'ETF', 'Commodity', 'Index', 'Future', 'Yield', 'FX'], None] Type of asset to search for. Defaults to None. None exchange Union [ str , None] Exchange to search for. Defaults to None. None Returns: Type Description List [ Dict [ str , Any ]] A list of dictionaries with the search results from Investing.com. Source code in investiny/search.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def search_assets ( query : str , limit : int = 10 , type : Union [ Literal [ \"Stock\" , \"ETF\" , \"Commodity\" , \"Index\" , \"Future\" , \"Yield\" , \"FX\" , ], None , ] = None , exchange : Union [ str , None ] = None , ) -> List [ Dict [ str , Any ]]: \"\"\"Search any available asset at Investing.com. Args: query: Query to search for. limit: Maximum number of results to retrieve. Defaults to 10. type: Type of asset to search for. Defaults to None. exchange: Exchange to search for. Defaults to None. Returns: A list of dictionaries with the search results from Investing.com. \"\"\" params = { \"query\" : query , \"limit\" : limit , \"type\" : type if type else \"\" , \"exchange\" : exchange if exchange else \"\" , } return request_to_investing ( endpoint = \"search\" , params = params ) # type: ignore","title":"Search"}]}